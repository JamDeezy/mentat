/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	/// <reference path="dts/d3.d.ts"/>
	var mentat;
	(function (mentat) {
	    /**
	     * Helpers
	     */
	    function createDocumentFragment(html) {
	        return document.createRange().createContextualFragment(html);
	    }
	    mentat.createDocumentFragment = createDocumentFragment;
	    /*
	     * http://stackoverflow.com/questions/4340227
	     */
	    function alphanumCompare(a, b) {
	        var reA = /[^a-zA-Z]/g;
	        var reN = /[^0-9]/g;
	        var aA = a.replace(reA, "");
	        var bA = b.replace(reA, "");
	        if (aA === bA) {
	            var aN = parseInt(a.replace(reN, ""), 10);
	            var bN = parseInt(b.replace(reN, ""), 10);
	            return aN === bN ? 0 : aN > bN ? 1 : -1;
	        }
	        else {
	            return aA > bA ? 1 : -1;
	        }
	    }
	    mentat.alphanumCompare = alphanumCompare;
	    function naturalCompare(a, b) {
	        var ax = [], bx = [];
	        a.replace(/(\d+)|(\D+)/g, function (_, $1, $2) {
	            ax.push([$1 || Infinity, $2 || ""]);
	        });
	        b.replace(/(\d+)|(\D+)/g, function (_, $1, $2) {
	            bx.push([$1 || Infinity, $2 || ""]);
	        });
	        while (ax.length && bx.length) {
	            var an = ax.shift();
	            var bn = bx.shift();
	            var nn = (an[0] - bn[0]) || an[1].localeCompare(bn[1]);
	            if (nn)
	                return nn;
	        }
	        return ax.length - bx.length;
	    }
	    mentat.naturalCompare = naturalCompare;
	    function warn(str) {
	        console.warn("MENTAT: " + str);
	    }
	    mentat.warn = warn;
	    function error(str) {
	        throw "MENTAT: " + str;
	    }
	    mentat.error = error;
	})(mentat || (mentat = {}));
	/**
	 * http://codereview.stackexchange.com/questions/83717
	 */
	Array.prototype.unique = function () {
	    var seen = {};
	    return this.filter(function (x) {
	        if (seen[x])
	            return;
	        seen[x] = true;
	        return x;
	    });
	};
	/**
	 * http://stackoverflow.com/questions/27266550
	 */
	Array.prototype.flatten = function () {
	    var toString = Object.prototype.toString;
	    var arrayTypeStr = '[object Array]';
	    var result = [];
	    var nodes = this.slice();
	    var node;
	    if (!this.length) {
	        return result;
	    }
	    node = nodes.pop();
	    do {
	        if (toString.call(node) === arrayTypeStr) {
	            nodes.push.apply(nodes, node);
	        }
	        else {
	            result.push(node);
	        }
	    } while (nodes.length && (node = nodes.pop()) !== undefined);
	    result.reverse();
	    return result;
	};
	Array.prototype.sum = function (prop) {
	    var total = 0;
	    for (var i = 0, _len = this.length; i < _len; i++) {
	        total += this[i][prop];
	    }
	    return total;
	};
	// TODO
	// API + documentation
	// pagnation
	// TODO dashboard
	// deep linking state
	// - move all of the required hash params into a single structure
	// - find a way to convert that hash data into a string and then into a
	//   hash id
	// - perform auto start up query (+ loader) if hashid is legit, otherwise clear 


/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgYmFjNGRmZWNlNzgwZTIzZmQxY2MiLCJ3ZWJwYWNrOi8vLy4vc3JjL21lbnRhdC50cyJdLCJuYW1lcyI6WyJtZW50YXQiLCJtZW50YXQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIm1lbnRhdC5hbHBoYW51bUNvbXBhcmUiLCJtZW50YXQubmF0dXJhbENvbXBhcmUiLCJtZW50YXQud2FybiIsIm1lbnRhdC5lcnJvciJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7QUN0Q0Esb0NBQW1DO0FBRW5DLEtBQU8sTUFBTSxDQXVEWjtBQXZERCxZQUFPLE1BQU0sRUFBQyxDQUFDO0tBRWJBOztRQUVHQTtLQUNIQSxnQ0FBdUNBLElBQVlBO1NBQ2pEQyxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxXQUFXQSxFQUFFQSxDQUFDQSx3QkFBd0JBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO0tBQy9EQSxDQUFDQTtLQUZlRCw2QkFBc0JBLHlCQUVyQ0E7S0FFREE7O1FBRUdBO0tBQ0hBLHlCQUFnQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0E7U0FDbENFLElBQUlBLEdBQUdBLEdBQUdBLFlBQVlBLENBQUNBO1NBQ3ZCQSxJQUFJQSxHQUFHQSxHQUFHQSxTQUFTQSxDQUFDQTtTQUVwQkEsSUFBSUEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsR0FBR0EsRUFBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7U0FDNUJBLElBQUlBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLEVBQUVBLEVBQUVBLENBQUNBLENBQUNBO1NB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QU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUNqQixNQUFNLENBQUMsTUFBTSxDQUFDO0FBQ2hCLEVBQUM7QUFFRCxNQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxVQUFTLElBQUk7S0FDakMsSUFBSSxLQUFLLEdBQUcsQ0FBQztLQUNiLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztTQUNsRCxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztLQUN4QixDQUFDO0tBQ0QsTUFBTSxDQUFDLEtBQUs7QUFDZCxFQUFDO0FBRUQsUUFBTztBQUNQLHVCQUFzQjtBQUN0QixhQUFZO0FBRVosa0JBQWlCO0FBQ2pCLHNCQUFxQjtBQUNyQixrRUFBaUU7QUFDakUsd0VBQXVFO0FBQ3ZFLGFBQVk7QUFDWixnRkFBK0UiLCJmaWxlIjoiLi9saWIvbWVudGF0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB3ZWJwYWNrL2Jvb3RzdHJhcCBiYWM0ZGZlY2U3ODBlMjNmZDFjY1xuICoqLyIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJkdHMvZDMuZC50c1wiLz5cblxubW9kdWxlIG1lbnRhdCB7XG5cbiAgLyoqXG4gICAqIEhlbHBlcnNcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEb2N1bWVudEZyYWdtZW50KGh0bWw6IHN0cmluZyk6IERvY3VtZW50RnJhZ21lbnQge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVSYW5nZSgpLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudChodG1sKTtcbiAgfVxuXG4gIC8qXG4gICAqIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDM0MDIyN1xuICAgKi9cbiAgZXhwb3J0IGZ1bmN0aW9uIGFscGhhbnVtQ29tcGFyZShhLCBiKSB7XG4gICAgdmFyIHJlQSA9IC9bXmEtekEtWl0vZztcbiAgICB2YXIgcmVOID0gL1teMC05XS9nO1xuXG4gICAgdmFyIGFBID0gYS5yZXBsYWNlKHJlQSwgXCJcIik7XG4gICAgdmFyIGJBID0gYi5yZXBsYWNlKHJlQSwgXCJcIik7XG4gICAgaWYgKGFBID09PSBiQSkge1xuICAgICAgdmFyIGFOID0gcGFyc2VJbnQoYS5yZXBsYWNlKHJlTiwgXCJcIiksIDEwKTtcbiAgICAgIHZhciBiTiA9IHBhcnNlSW50KGIucmVwbGFjZShyZU4sIFwiXCIpLCAxMCk7XG4gICAgICByZXR1cm4gYU4gPT09IGJOID8gMCA6IGFOID4gYk4gPyAxIDogLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhQSA+IGJBID8gMSA6IC0xO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBuYXR1cmFsQ29tcGFyZShhLCBiKSB7XG4gICAgdmFyIGF4ID0gW10sIGJ4ID0gW107XG5cbiAgICBhLnJlcGxhY2UoLyhcXGQrKXwoXFxEKykvZywgZnVuY3Rpb24oXywgJDEsICQyKSB7XG4gICAgICBheC5wdXNoKFskMSB8fCBJbmZpbml0eSwgJDIgfHwgXCJcIl0pXG4gICAgfSk7XG4gICAgYi5yZXBsYWNlKC8oXFxkKyl8KFxcRCspL2csIGZ1bmN0aW9uKF8sICQxLCAkMikge1xuICAgICAgYngucHVzaChbJDEgfHwgSW5maW5pdHksICQyIHx8IFwiXCJdKVxuICAgIH0pO1xuXG4gICAgd2hpbGUgKGF4Lmxlbmd0aCAmJiBieC5sZW5ndGgpIHtcbiAgICAgIHZhciBhbiA9IGF4LnNoaWZ0KCk7XG4gICAgICB2YXIgYm4gPSBieC5zaGlmdCgpO1xuICAgICAgdmFyIG5uID0gKGFuWzBdIC0gYm5bMF0pIHx8IGFuWzFdLmxvY2FsZUNvbXBhcmUoYm5bMV0pO1xuICAgICAgaWYgKG5uKSByZXR1cm4gbm47XG4gICAgfVxuXG4gICAgcmV0dXJuIGF4Lmxlbmd0aCAtIGJ4Lmxlbmd0aDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiB3YXJuKHN0cjogc3RyaW5nKSB7XG4gICAgY29uc29sZS53YXJuKFwiTUVOVEFUOiBcIiArIHN0cik7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gZXJyb3Ioc3RyOiBzdHJpbmcpIHtcbiAgICB0aHJvdyBcIk1FTlRBVDogXCIgKyBzdHJcbiAgfVxuXG59XG5cbi8qKlxuICogVE9ETzogZmluZCBhIHBsYWNlIGZvciB0aGlzXG4gKi9cbmludGVyZmFjZSBBcnJheTxUPiB7XG4gIHVuaXF1ZSgpOiBhbnlbXTtcbiAgZmxhdHRlbigpOiBhbnlbXTtcbiAgc3VtKHByb3ApOiBudW1iZXI7XG59XG5cbi8qKlxuICogaHR0cDovL2NvZGVyZXZpZXcuc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzgzNzE3XG4gKi9cbkFycmF5LnByb3RvdHlwZS51bmlxdWUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNlZW4gPSB7fVxuICByZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oeCkge1xuICAgIGlmIChzZWVuW3hdKVxuICAgICAgcmV0dXJuXG4gICAgc2Vlblt4XSA9IHRydWVcbiAgICByZXR1cm4geFxuICB9KVxufVxuXG4vKipcbiAqIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjcyNjY1NTBcbiAqL1xuQXJyYXkucHJvdG90eXBlLmZsYXR0ZW4gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbiAgdmFyIGFycmF5VHlwZVN0ciA9ICdbb2JqZWN0IEFycmF5XSc7XG5cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgbm9kZXMgPSB0aGlzLnNsaWNlKCk7XG4gIHZhciBub2RlO1xuXG4gIGlmICghdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgbm9kZSA9IG5vZGVzLnBvcCgpO1xuXG4gIGRvIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChub2RlKSA9PT0gYXJyYXlUeXBlU3RyKSB7XG4gICAgICBub2Rlcy5wdXNoLmFwcGx5KG5vZGVzLCBub2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnB1c2gobm9kZSk7XG4gICAgfVxuICB9IHdoaWxlIChub2Rlcy5sZW5ndGggJiYgKG5vZGUgPSBub2Rlcy5wb3AoKSkgIT09IHVuZGVmaW5lZCk7XG5cbiAgcmVzdWx0LnJldmVyc2UoKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuQXJyYXkucHJvdG90eXBlLnN1bSA9IGZ1bmN0aW9uKHByb3ApIHtcbiAgdmFyIHRvdGFsID0gMFxuICBmb3IgKHZhciBpID0gMCwgX2xlbiA9IHRoaXMubGVuZ3RoOyBpIDwgX2xlbjsgaSsrKSB7XG4gICAgdG90YWwgKz0gdGhpc1tpXVtwcm9wXVxuICB9XG4gIHJldHVybiB0b3RhbFxufVxuXG4vLyBUT0RPXG4vLyBBUEkgKyBkb2N1bWVudGF0aW9uXG4vLyBwYWduYXRpb25cblxuLy8gVE9ETyBkYXNoYm9hcmRcbi8vIGRlZXAgbGlua2luZyBzdGF0ZVxuLy8gLSBtb3ZlIGFsbCBvZiB0aGUgcmVxdWlyZWQgaGFzaCBwYXJhbXMgaW50byBhIHNpbmdsZSBzdHJ1Y3R1cmVcbi8vIC0gZmluZCBhIHdheSB0byBjb252ZXJ0IHRoYXQgaGFzaCBkYXRhIGludG8gYSBzdHJpbmcgYW5kIHRoZW4gaW50byBhXG4vLyAgIGhhc2ggaWRcbi8vIC0gcGVyZm9ybSBhdXRvIHN0YXJ0IHVwIHF1ZXJ5ICgrIGxvYWRlcikgaWYgaGFzaGlkIGlzIGxlZ2l0LCBvdGhlcndpc2UgY2xlYXJcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9tZW50YXQudHNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9